# -*- coding: utf-8 -*-
"""
@author: tz_zs
将MNIST数据集中所有的训练数据存储到一个TFRecord文件中
"""
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
import numpy as np


# 生成整数型的属性
def _int64_feature(value):
    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))


# 生成字符串型的属性
def _bytes_feature(value):
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))


mnist = input_data.read_data_sets("/path/to/mnist/data", dtype=tf.uint8, one_hot=True)
images = mnist.train.images
labels = mnist.train.labels

pixels = images.shape[1]  # 784
num_examples = mnist.train.num_examples  # 55000

# 输出TFRecord文件的地址
filename = "/path/to/output.tfrecords"
# 创建一个writer来书写TFRecord文件
writer = tf.python_io.TFRecordWriter(filename)
for index in range(num_examples):
    # 将图像矩阵转化为一个字符串
    image_raw = images[index].tostring()
    '''
    print(images[index])
    [  0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0  97  96  77 118  61   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0  90 138 235 235 235 235 235
     235 251 251 248 254 245 235 190  21   0   0   0   0   0   0   0   0   0
       0   0 140 251 254 254 254 254 254 254 254 254 254 254 254 254 254 254
     189  23   0   0   0   0   0   0   0   0   0   0 226 254 208 199 199 199
     199 139  61  61  61  61  61 128 222 254 254 189  21   0   0   0   0   0
       0   0   0   0  38  82  13   0   0   0   0   0   0   0   0   0   0   0
      34 213 254 254 115   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0  84 254 254 234   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0  84 254 254 234   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0 106 157 254 254 243  51
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  25
     117 228 228 228 253 254 254 254 254 240   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0  68 119 220 254 254 254 254 254 254 254 254
     254 142   0   0   0   0   0   0   0   0   0   0   0   0   0  37 187 253
     254 254 254 223 206 206  75  68 215 254 254 117   0   0   0   0   0   0
       0   0   0   0   0   0 113 219 254 242 227 115  89  31   0   0   0   0
     200 254 241  41   0   0   0   0   0   0   0   0   0   0   0   0 169 254
     176  62   0   0   0   0   0   0   0  48 231 254 234   0   0   0   0   0
       0   0   0   0   0   0   0   0  18 124   0   0   0   0   0   0   0   0
       0  84 254 254 166   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0 139 254 238  57   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0 210 250 254 168   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0 242 254 239  57   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0  89 251 241  86   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   5 206 246 157   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   4 117  69   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
       0   0   0   0   0   0   0   0   0   0]

    print(image_raw)
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00a`Mv=\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00Z\x8a\xeb\xeb\xeb\xeb\xeb\xeb\xfb\xfb\xf8\xfe\xf5\xeb\xbe\x15\x00
    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8c\xfb\xfe\xfe\xfe\xfe\xfe\xfe\xfe\xfe\xfe\xfe\xfe\xfe
    \xfe\xfe\xbd\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe2\xfe\xd0\xc7\xc7\xc7\xc7\x8b=====\x80
    \xde\xfe\xfe\xbd\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00&R\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00"\xd5\xfe\xfes\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00T\xfe\xfe\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00T\xfe\xfe\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00j\x9d\xfe\xfe\xf33\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x19u\xe4\xe4\xe4\xfd\xfe\xfe\xfe\xfe\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00Dw\xdc\xfe\xfe\xfe\xfe\xfe\xfe\xfe\xfe\xfe\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%\xbb
    \xfd\xfe\xfe\xfe\xdf\xce\xceKD\xd7\xfe\xfeu\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00q\xdb\xfe\xf2
    \xe3sY\x1f\x00\x00\x00\x00\xc8\xfe\xf1)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa9\xfe\xb0>\x00
    \x00\x00\x00\x00\x00\x000\xe7\xfe\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12|\x00\x00\x00
    \x00\x00\x00\x00\x00\x00T\xfe\xfe\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x8b\xfe\xee9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\xd2\xfa\xfe\xa8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\xf2\xfe\xef9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00Y\xfb\xf1V\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x05\xce\xf6\x9d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x04uE\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    '''
    example = tf.train.Example(features=tf.train.Features(
        feature={'pixels': _int64_feature(pixels),
                 'label': _int64_feature(np.argmax(labels[index])),
                 'image_raw': _bytes_feature(image_raw)}))
    '''
    features {
      feature {
        key: "image_raw"
        value {
          bytes_list {
            valuea`Mv=\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Z\212\353\353\353\353\353\353\373\373\370\376\365\353\276\025\000\000\000\000\000\000\000\000\000\000\000\214\373\376\376\376\376\376\376\376\376\376\376\376\376\376\376\275\027\000\000\000\000\000\000\000\000\000\000\342\376\320\307\307\307\307\213=====\200\336\376\376\275\025\000\000\000\000\000\000\000\000\000&R\r\000\000\000\000\000\000\000\000\000\000\000\"\325\376\376s\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000T\376\376\352\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000T\376\376\352\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000j\235\376\376\3633\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031u\344\344\344\375\376\376\376\376\360\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Dw\334\376\376\376\376\376\376\376\376\376\216\000\000\000\000\000\000\000\000\000\000\000\000\000%\273\375\376\376\376\337\316\316KD\327\376\376u\000\000\000\000\000\000\000\000\000\000\000\000q\333\376\362\343sY\037\000\000\000\000\310\376\361)\000\000\000\000\000\000\000\000\000\000\000\000\251\376\260>\000\000\000\000\000\000\0000\347\376\352\000\000\000\000\000\000\000\000\000\000\000\000\000\022|uE\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
          }
        }
      }
      feature {
        key: "label"
        value {
          int64_list {
            value: 7
          }
        }
      }
      feature {
        key: "pixels"
        value {
          int64_list {
            value: 784
          }
        }
      }
    }
    '''
    # 写
    writer.write(example.SerializeToString())
writer.close()
